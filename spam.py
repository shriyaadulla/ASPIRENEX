# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Wnb9OdIolI4wZkiN9mp6j1wWAd3GkW0K
"""

pip install pandas scikit-learn

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report

# Load data
file_path = '/content/spam.csv'
spam_data = pd.read_csv(file_path, encoding='latin1')

# Display the first few rows of the dataframe to understand its structure
print(spam_data.head())

# Remove unnecessary columns
spam_data = spam_data[['v1', 'v2']]

# Rename columns for clarity
spam_data = spam_data.rename(columns={'v1': 'label', 'v2': 'message'})

# Remove any rows with missing values
spam_data.dropna(subset=['label', 'message'], inplace=True)

# Map labels to binary values
spam_data['label'] = spam_data['label'].map({'ham': 0, 'spam': 1})

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(spam_data['message'], spam_data['label'], test_size=0.2, random_state=42)

# Vectorize the text data
vectorizer = TfidfVectorizer()
X_train_tfidf = vectorizer.fit_transform(X_train)
X_test_tfidf = vectorizer.transform(X_test)

# Train the SVM model
svm_model = SVC(kernel='linear')
svm_model.fit(X_train_tfidf, y_train)

# Make predictions
y_pred = svm_model.predict(X_test_tfidf)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
report = classification_report(y_test, y_pred)

print("SVM Classifier")
print("Accuracy:", accuracy)
print("Classification Report:\n", report)

# Function to predict if a message is spam or not
def predict_spam(message):
    message_tfidf = vectorizer.transform([message])
    prediction = svm_model.predict(message_tfidf)
    return "Spam" if prediction[0] == 1 else "Not Spam"

# Taking input from the user
user_message = input("Enter the message to classify: ")
result = predict_spam(user_message)
print(f"The message is: {result}")